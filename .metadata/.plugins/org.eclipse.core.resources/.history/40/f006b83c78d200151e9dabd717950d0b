#include "WPILib.h"
#include "Joystick.h"
#include "nt_Value.h"
#include "Math.h"
/**
 * This is a demo program showing the use of the RobotDrive class.
 * The SampleRobot class is the base of a robot application that will automatically call your
 * Autonomous and OperatorControl methods at the right time as controlled by the switches on
 * the driver station or the field controls.
 *
 * WARNING: While it may look like a good choice to use for your code if you're inexperienced,
 * don't. Unless you know what you are doing, complex code will be much more difficult under
 * this system. Use IterativeRobot or Command-Based instead if you're new.
 */
class Robot: public SampleRobot
{
	RobotDrive myRobot; // robot drive system
	Joystick stick; // only joystick
	Victor shooter;
	bool isMoving=false;

public:
	Robot() :
		myRobot(0, 1, 2, 3),
		stick(5),
		shooter(4)
		{
		myRobot.SetExpiration(0.1);
		SmartDashboard::init();

}
	/*
	 * Runs the motors with arcade steering.
	 */
	void OperatorControl()
	{
		isMoving=false;
		while (IsOperatorControl() && IsEnabled())
		{

			if(stick.GetRawButton(2)&&!isMoving)
				shooter.Set(0.1);
			else if(stick.GetRawButton(3)&&!isMoving)
				shooter.Set(-0.1);
			else if((stick.GetRawButton(2)||stick.GetRawButton(3))&&isMoving)
				shooter.Set(0);

			/*if(stick.GetRawButton(1)){
				shooter.Set(.75);
			}
			else
				shooter.Set(0);
				*/
			//std::cout<<-1*stick.GetRawAxis(1)<<","<<-1*stick.GetRawAxis(5)<<std::endl;
			myRobot.ArcadeDrive(stick.GetRawAxis(1), true);
			Wait(0.005);
		}
		while(IsAutonomous() && IsEnabled())
		{
			std::cout << "Test";
			double xVal = SmartDashboard::GetNumber("COG_X", 0.0);
			std::cout<<"xVal is currently "<<xVal<<std::endl;
			/*double speed = (160-xVal)/320.0 * 0.4;
			if(speed > 0.5)
				speed=0.5;
			if(speed < 0.5)
				speed=-0.5;
			if(160-xVal>25){

				myRobot.TankDrive(speed,-speed);
				std::cout<<"Turning Left"<<std::endl;
			}
			else if(160-xVal<-25){
				myRobot.TankDrive(-speed,speed);
				std::cout<<"Turning Right"<<std::endl;
			}
			else{
				myRobot.TankDrive(0.5,0.5);
				std::cout<<"Not Turning"<<std::endl;
			}
			*/
			double speed = (1/160)*(xVal-160);
			if(abs(160-xVal)<25){
				myRobot.TankDrive(0.25, 0.25);
			}
			else if(speed > 0.5){
				myRobot.TankDrive(0.5*speed, -0.5*speed);
			}
			else{
				myRobot.TankDrive(speed, -speed);
			}
			Wait(0.005);
		}
	}
};


START_ROBOT_CLASS(Robot)
